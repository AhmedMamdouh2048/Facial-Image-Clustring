#include "Image_Classifier.h"
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Image_Classifier::Image_Classifier(Arguments* A, DatasetParam* D)
{
	Arg = A;
	DP = D;

	/*Set the number of CPU cores available*/
	Cores = thread::hardware_concurrency();

	/*Set the number of dictionaries based on the number of CPU cores with one extra dictionary for non-threaded tasks*/
	FC_Cache = new Mat_Dictionary[Cores + 1];
	FC_Grades = new Mat_Dictionary[Cores + 1];

	/*Set the names of these dictionaries*/
	FC_Parameters.setName("FC_Parameters");

	for (int i = 0; i < Cores + 1; i++)
	{
		FC_Cache[i].setName(CharGen("FC_Cache", i));
		FC_Grades[i].setName(CharGen("FC_Grades", i));
	}

	/*Initialize the required network*/
	switch (Arg->NetType)
	{
	case FC:
		init_FC();
		break;
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Image_Classifier::train()
{
	switch (Arg->NetType)
	{
	case FC:
		train_FC();
		break;
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Image_Classifier::test(Mode devOrtest)
{
	/*ARGUMENT LIST*/
	BoolMatrix* Y_dev = Arg->Y_dev;
	BoolMatrix* Y_test = Arg->Y_test;
	/*END OF ARGUMENT LIST*/

	Matrix* Y_hat = nullptr;
	switch (Arg->NetType)
	{
	case FC:
		test_FC(devOrtest);
		break;
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Image_Classifier::StoreParameters()
{
	if (Arg->SaveParameters)
	{
		FC_Parameters.Write(DP->ParametersPath);
		FC_ADAM.Write(DP->ParametersPath);
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Image_Classifier::RetrieveParameters()
{
	if (Arg->RetrieveParameters)
	{
		FC_Parameters.Read(DP->ParametersPath);
		FC_ADAM.Read(DP->ParametersPath);
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Image_Classifier::TestParameters()
{
    if(Arg->TestParameters)
        test(TEST);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Image_Classifier::Print()
{
	FC_Parameters.print();
	FC_ADAM.print();
}
